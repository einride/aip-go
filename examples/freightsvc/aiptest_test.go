package freightsvc

// Code generated by aip-test. DO NOT EDIT.

import (
	"context"
	"strings"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp/cmpopts"
	examplefreightv1 "go.einride.tech/aip/examples/proto/gen/einride/example/freight/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/testing/protocmp"
	"google.golang.org/protobuf/types/known/fieldmaskpb"
	"gotest.tools/v3/assert"
)

type aipTestShipperFixture struct {
	Ctx        context.Context
	Service    examplefreightv1.FreightServiceServer
	Create     func() *examplefreightv1.Shipper
	Update     func() *examplefreightv1.Shipper
	Skip       []string
	currParent int
}

func (a *aipTestShipperFixture) Test(t *testing.T) {
	t.Run("Create", a.testCreate)
	t.Run("Get", a.testGet)
	t.Run("Update", a.testUpdate)
	t.Run("List", a.testList)
}

func (a *aipTestShipperFixture) ctx() context.Context {
	if a.Ctx == nil {
		return context.Background()
	}
	return a.Ctx
}

func (a *aipTestShipperFixture) maybeSkip(t *testing.T) {
	for _, skip := range a.Skip {
		if strings.Contains(t.Name(), skip) {
			t.Skip("skipped because of .Skip")
		}
	}
}

func (a *aipTestShipperFixture) testCreate(t *testing.T) {
	// Standard methods: Create
	// https://google.aip.dev/133

	_ = protoreflect.ValueOf

	t.Run("persisted", func(t *testing.T) {
		a.maybeSkip(t)
		msg, err := a.Service.CreateShipper(a.ctx(), &examplefreightv1.CreateShipperRequest{
			Shipper: a.Create(),
		})
		assert.NilError(t, err)
		persisted, err := a.Service.GetShipper(a.ctx(), &examplefreightv1.GetShipperRequest{
			Name: msg.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, msg, persisted, protocmp.Transform())
	})

	t.Run("create time", func(t *testing.T) {
		a.maybeSkip(t)
		msg, err := a.Service.CreateShipper(a.ctx(), &examplefreightv1.CreateShipperRequest{
			Shipper: a.Create(),
		})
		assert.NilError(t, err)
		assert.Check(t, time.Since(msg.CreateTime.AsTime()) < time.Second)
	})

	t.Run("required fields", func(t *testing.T) {
		a.maybeSkip(t)
		for _, tt := range []protoreflect.Name{
			"display_name",
		} {
			tt := tt
			t.Run(string(tt), func(t *testing.T) {
				msg := a.Create()
				msg.ProtoReflect().Clear(msg.ProtoReflect().Descriptor().Fields().ByName(tt))
				_, err := a.Service.CreateShipper(a.ctx(), &examplefreightv1.CreateShipperRequest{
					Shipper: msg,
				})
				assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
			})
		}
	})

}

func (a *aipTestShipperFixture) testGet(t *testing.T) {
	// Standard methods: Get
	// https://google.aip.dev/131

	created00, err := a.Service.CreateShipper(a.ctx(), &examplefreightv1.CreateShipperRequest{
		Shipper: a.Create(),
	})
	assert.NilError(t, err)

	t.Run("missing", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.GetShipper(a.ctx(), &examplefreightv1.GetShipperRequest{
			Name: created00.Name + "notfound",
		})
		assert.Equal(t, codes.NotFound, status.Code(err), err)
	})

	t.Run("exists", func(t *testing.T) {
		a.maybeSkip(t)
		msg, err := a.Service.GetShipper(a.ctx(), &examplefreightv1.GetShipperRequest{
			Name: created00.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, created00, msg, protocmp.Transform())
	})

	t.Run("missing name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.GetShipper(a.ctx(), &examplefreightv1.GetShipperRequest{
			Name: "",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.GetShipper(a.ctx(), &examplefreightv1.GetShipperRequest{
			Name: "invalid name",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

}

func (a *aipTestShipperFixture) testUpdate(t *testing.T) {
	// Standard methods: Update
	// https://google.aip.dev/134

	_ = protoreflect.ValueOf

	t.Run("persisted", func(t *testing.T) {
		a.maybeSkip(t)
		created, err := a.Service.CreateShipper(a.ctx(), &examplefreightv1.CreateShipperRequest{
			Shipper: a.Create(),
		})
		assert.NilError(t, err)
		updated, err := a.Service.UpdateShipper(a.ctx(), &examplefreightv1.UpdateShipperRequest{
			Shipper: (func() *examplefreightv1.Shipper {
				msg := a.Update()
				msg.Name = created.Name
				return msg
			})(),
		})
		assert.NilError(t, err)
		persisted, err := a.Service.GetShipper(a.ctx(), &examplefreightv1.GetShipperRequest{
			Name: updated.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, updated, persisted, protocmp.Transform())
	})

	t.Run("update time", func(t *testing.T) {
		a.maybeSkip(t)
		created, err := a.Service.CreateShipper(a.ctx(), &examplefreightv1.CreateShipperRequest{
			Shipper: a.Create(),
		})
		assert.NilError(t, err)
		updated, err := a.Service.UpdateShipper(a.ctx(), &examplefreightv1.UpdateShipperRequest{
			Shipper: (func() *examplefreightv1.Shipper {
				msg := a.Update()
				msg.Name = created.Name
				return msg
			})(),
		})
		assert.NilError(t, err)
		assert.Check(t, updated.UpdateTime.AsTime().After(created.UpdateTime.AsTime()))
	})

	t.Run("required fields", func(t *testing.T) {
		a.maybeSkip(t)
		for _, tt := range []protoreflect.Name{
			"display_name",
		} {
			tt := tt
			t.Run(string(tt), func(t *testing.T) {
				created, err := a.Service.CreateShipper(a.ctx(), &examplefreightv1.CreateShipperRequest{
					Shipper: a.Create(),
				})
				assert.NilError(t, err)
				msg := a.Update()
				msg.Name = created.Name
				msg.ProtoReflect().Clear(msg.ProtoReflect().Descriptor().Fields().ByName(tt))
				_, err = a.Service.UpdateShipper(a.ctx(), &examplefreightv1.UpdateShipperRequest{
					Shipper: msg,
					UpdateMask: &fieldmaskpb.FieldMask{
						Paths: []string{
							"*",
						},
					},
				})
				assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
			})
		}
	})

	t.Run("invalid update mask", func(t *testing.T) {
		a.maybeSkip(t)
		created, err := a.Service.CreateShipper(a.ctx(), &examplefreightv1.CreateShipperRequest{
			Shipper: a.Create(),
		})
		assert.NilError(t, err)
		_, err = a.Service.UpdateShipper(a.ctx(), &examplefreightv1.UpdateShipperRequest{
			Shipper: (func() *examplefreightv1.Shipper {
				msg := a.Update()
				msg.Name = created.Name
				return msg
			})(),
			UpdateMask: &fieldmaskpb.FieldMask{
				Paths: []string{
					"invalid_field_xxx",
				},
			},
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("missing name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.UpdateShipper(a.ctx(), &examplefreightv1.UpdateShipperRequest{
			Shipper: (func() *examplefreightv1.Shipper {
				msg := a.Update()
				msg.Name = ""
				return msg
			})(),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.UpdateShipper(a.ctx(), &examplefreightv1.UpdateShipperRequest{
			Shipper: (func() *examplefreightv1.Shipper {
				msg := a.Update()
				msg.Name = ""
				return msg
			})(),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

}

func (a *aipTestShipperFixture) testList(t *testing.T) {
	// Standard methods: List
	// https://google.aip.dev/132

	_ = cmpopts.SortSlices
	const n = 15

	parent02msgs := make([]*examplefreightv1.Shipper, n)
	for i := 0; i < n; i++ {
		msg, err := a.Service.CreateShipper(a.ctx(), &examplefreightv1.CreateShipperRequest{
			Shipper: a.Create(),
		})
		assert.NilError(t, err)
		parent02msgs[i] = msg
	}

	t.Run("negative page size", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.ListShippers(a.ctx(), &examplefreightv1.ListShippersRequest{
			PageSize: -10,
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid page token", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.ListShippers(a.ctx(), &examplefreightv1.ListShippersRequest{
			PageToken: "invalid page token",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})
}

type aipTestSiteFixture struct {
	Ctx        context.Context
	Service    examplefreightv1.FreightServiceServer
	Parents    []string
	Create     func(parent string) *examplefreightv1.Site
	Update     func(parent string) *examplefreightv1.Site
	Skip       []string
	currParent int
}

func (a *aipTestSiteFixture) Test(t *testing.T) {
	t.Run("Create", a.testCreate)
	t.Run("Get", a.testGet)
	t.Run("Update", a.testUpdate)
	t.Run("List", a.testList)
}

func (a *aipTestSiteFixture) ctx() context.Context {
	if a.Ctx == nil {
		return context.Background()
	}
	return a.Ctx
}

func (a *aipTestSiteFixture) maybeSkip(t *testing.T) {
	for _, skip := range a.Skip {
		if strings.Contains(t.Name(), skip) {
			t.Skip("skipped because of .Skip")
		}
	}
}

func (a *aipTestSiteFixture) nextParent(t *testing.T, pristine bool) string {
	if pristine {
		a.currParent++
	}
	if a.currParent >= len(a.Parents) {
		t.Fatal("need atleast", a.currParent+1, "parents")
	}
	return a.Parents[a.currParent]
}

func (a *aipTestSiteFixture) peekNextParent(t *testing.T) string {
	next := a.currParent + 1
	if next >= len(a.Parents) {
		t.Fatal("need atleast", next+1, "parents")
	}
	return a.Parents[next]
}

func (a *aipTestSiteFixture) testCreate(t *testing.T) {
	// Standard methods: Create
	// https://google.aip.dev/133

	_ = protoreflect.ValueOf

	parent := a.nextParent(t, false)

	t.Run("persisted", func(t *testing.T) {
		a.maybeSkip(t)
		msg, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
			Parent: parent,
			Site:   a.Create(parent),
		})
		assert.NilError(t, err)
		persisted, err := a.Service.GetSite(a.ctx(), &examplefreightv1.GetSiteRequest{
			Name: msg.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, msg, persisted, protocmp.Transform())
	})

	t.Run("create time", func(t *testing.T) {
		a.maybeSkip(t)
		msg, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
			Parent: parent,
			Site:   a.Create(parent),
		})
		assert.NilError(t, err)
		assert.Check(t, time.Since(msg.CreateTime.AsTime()) < time.Second)
	})

	t.Run("required fields", func(t *testing.T) {
		a.maybeSkip(t)
		for _, tt := range []protoreflect.Name{
			"display_name",
		} {
			tt := tt
			t.Run(string(tt), func(t *testing.T) {
				msg := a.Create(parent)
				msg.ProtoReflect().Clear(msg.ProtoReflect().Descriptor().Fields().ByName(tt))
				_, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
					Parent: parent,
					Site:   msg,
				})
				assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
			})
		}
	})

	t.Run("missing parent", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
			Parent: "",
			Site:   a.Create(parent),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid parent", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
			Parent: "invalid parent",
			Site:   a.Create(parent),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

}

func (a *aipTestSiteFixture) testGet(t *testing.T) {
	// Standard methods: Get
	// https://google.aip.dev/131

	parent := a.nextParent(t, false)
	created00, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
		Parent: parent,
		Site:   a.Create(parent),
	})
	assert.NilError(t, err)

	t.Run("missing", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.GetSite(a.ctx(), &examplefreightv1.GetSiteRequest{
			Name: created00.Name + "notfound",
		})
		assert.Equal(t, codes.NotFound, status.Code(err), err)
	})

	t.Run("exists", func(t *testing.T) {
		a.maybeSkip(t)
		msg, err := a.Service.GetSite(a.ctx(), &examplefreightv1.GetSiteRequest{
			Name: created00.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, created00, msg, protocmp.Transform())
	})

	t.Run("missing name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.GetSite(a.ctx(), &examplefreightv1.GetSiteRequest{
			Name: "",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.GetSite(a.ctx(), &examplefreightv1.GetSiteRequest{
			Name: "invalid name",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

}

func (a *aipTestSiteFixture) testUpdate(t *testing.T) {
	// Standard methods: Update
	// https://google.aip.dev/134

	_ = protoreflect.ValueOf

	parent := a.nextParent(t, false)

	t.Run("persisted", func(t *testing.T) {
		a.maybeSkip(t)
		created, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
			Parent: parent,
			Site:   a.Create(parent),
		})
		assert.NilError(t, err)
		updated, err := a.Service.UpdateSite(a.ctx(), &examplefreightv1.UpdateSiteRequest{
			Site: (func() *examplefreightv1.Site {
				msg := a.Update(parent)
				msg.Name = created.Name
				return msg
			})(),
		})
		assert.NilError(t, err)
		persisted, err := a.Service.GetSite(a.ctx(), &examplefreightv1.GetSiteRequest{
			Name: updated.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, updated, persisted, protocmp.Transform())
	})

	t.Run("update time", func(t *testing.T) {
		a.maybeSkip(t)
		created, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
			Parent: parent,
			Site:   a.Create(parent),
		})
		assert.NilError(t, err)
		updated, err := a.Service.UpdateSite(a.ctx(), &examplefreightv1.UpdateSiteRequest{
			Site: (func() *examplefreightv1.Site {
				msg := a.Update(parent)
				msg.Name = created.Name
				return msg
			})(),
		})
		assert.NilError(t, err)
		assert.Check(t, updated.UpdateTime.AsTime().After(created.UpdateTime.AsTime()))
	})

	t.Run("required fields", func(t *testing.T) {
		a.maybeSkip(t)
		for _, tt := range []protoreflect.Name{
			"display_name",
		} {
			tt := tt
			t.Run(string(tt), func(t *testing.T) {
				created, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
					Parent: parent,
					Site:   a.Create(parent),
				})
				assert.NilError(t, err)
				msg := a.Update(parent)
				msg.Name = created.Name
				msg.ProtoReflect().Clear(msg.ProtoReflect().Descriptor().Fields().ByName(tt))
				_, err = a.Service.UpdateSite(a.ctx(), &examplefreightv1.UpdateSiteRequest{
					Site: msg,
					UpdateMask: &fieldmaskpb.FieldMask{
						Paths: []string{
							"*",
						},
					},
				})
				assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
			})
		}
	})

	t.Run("invalid update mask", func(t *testing.T) {
		a.maybeSkip(t)
		created, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
			Parent: parent,
			Site:   a.Create(parent),
		})
		assert.NilError(t, err)
		_, err = a.Service.UpdateSite(a.ctx(), &examplefreightv1.UpdateSiteRequest{
			Site: (func() *examplefreightv1.Site {
				msg := a.Update(parent)
				msg.Name = created.Name
				return msg
			})(),
			UpdateMask: &fieldmaskpb.FieldMask{
				Paths: []string{
					"invalid_field_xxx",
				},
			},
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("missing name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.UpdateSite(a.ctx(), &examplefreightv1.UpdateSiteRequest{
			Site: (func() *examplefreightv1.Site {
				msg := a.Update(parent)
				msg.Name = ""
				return msg
			})(),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.UpdateSite(a.ctx(), &examplefreightv1.UpdateSiteRequest{
			Site: (func() *examplefreightv1.Site {
				msg := a.Update(parent)
				msg.Name = ""
				return msg
			})(),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

}

func (a *aipTestSiteFixture) testList(t *testing.T) {
	// Standard methods: List
	// https://google.aip.dev/132

	parent01 := a.nextParent(t, false)
	parent02 := a.nextParent(t, true)

	const n = 15

	parent01msgs := make([]*examplefreightv1.Site, n)
	for i := 0; i < n; i++ {
		msg, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
			Parent: parent01,
			Site:   a.Create(parent01),
		})
		assert.NilError(t, err)
		parent01msgs[i] = msg
	}

	parent02msgs := make([]*examplefreightv1.Site, n)
	for i := 0; i < n; i++ {
		msg, err := a.Service.CreateSite(a.ctx(), &examplefreightv1.CreateSiteRequest{
			Parent: parent02,
			Site:   a.Create(parent02),
		})
		assert.NilError(t, err)
		parent02msgs[i] = msg
	}

	// list methods with a specified parent should not return resources
	// owned by another parent.
	t.Run("isolation", func(t *testing.T) {
		a.maybeSkip(t)
		response, err := a.Service.ListSites(a.ctx(), &examplefreightv1.ListSitesRequest{
			Parent:   parent02,
			PageSize: 9999,
		})
		assert.NilError(t, err)
		assert.DeepEqual(
			t,
			parent02msgs,
			response.Sites,
			protocmp.Transform(),
			cmpopts.SortSlices(func(a, b *examplefreightv1.Site) bool {
				return a.Name < b.Name
			}),
		)
	})

	t.Run("pagination", func(t *testing.T) {
		a.maybeSkip(t)
		// If there are no more resources, next_page_token should be unset.
		t.Run("next page token", func(t *testing.T) {
			a.maybeSkip(t)
			response, err := a.Service.ListSites(a.ctx(), &examplefreightv1.ListSitesRequest{
				Parent:   parent02,
				PageSize: n,
			})
			assert.NilError(t, err)
			assert.Equal(t, "", response.NextPageToken)
		})

		// Listing resource one by one should eventually return all resources created.
		// Catches errors where page tokens are not stable.
		t.Run("one by one", func(t *testing.T) {
			a.maybeSkip(t)
			msgs := make([]*examplefreightv1.Site, 0, n)
			var nextPageToken string
			for {
				response, err := a.Service.ListSites(a.ctx(), &examplefreightv1.ListSitesRequest{
					Parent:    parent02,
					PageSize:  1,
					PageToken: nextPageToken,
				})
				assert.NilError(t, err)
				assert.Equal(t, 1, len(response.Sites))
				msgs = append(msgs, response.Sites...)
				nextPageToken = response.NextPageToken
				if nextPageToken == "" {
					break
				}
			}
			assert.DeepEqual(
				t,
				parent02msgs,
				msgs,
				protocmp.Transform(),
				cmpopts.SortSlices(func(a, b *examplefreightv1.Site) bool {
					return a.Name < b.Name
				}),
			)
		})

	})

	t.Run("deleted", func(t *testing.T) {
		a.maybeSkip(t)
		// Delete some of the resources
		const nDelete = 5
		for i := 0; i < nDelete; i++ {
			_, err := a.Service.DeleteSite(a.ctx(), &examplefreightv1.DeleteSiteRequest{
				Name: parent02msgs[i].Name,
			})
			assert.NilError(t, err)
		}
		response, err := a.Service.ListSites(a.ctx(), &examplefreightv1.ListSitesRequest{
			Parent:   parent02,
			PageSize: 9999,
		})
		assert.NilError(t, err)
		assert.DeepEqual(
			t,
			parent02msgs[nDelete:],
			response.Sites,
			protocmp.Transform(),
			cmpopts.SortSlices(func(a, b *examplefreightv1.Site) bool {
				return a.Name < b.Name
			}),
		)
	})
	t.Run("invalid parent", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.ListSites(a.ctx(), &examplefreightv1.ListSitesRequest{
			Parent: "invalid parent",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("negative page size", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.ListSites(a.ctx(), &examplefreightv1.ListSitesRequest{
			Parent:   parent02,
			PageSize: -10,
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid page token", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.ListSites(a.ctx(), &examplefreightv1.ListSitesRequest{
			Parent:    parent02,
			PageToken: "invalid page token",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})
}

type aipTestShipmentFixture struct {
	Ctx        context.Context
	Service    examplefreightv1.FreightServiceServer
	Parents    []string
	Create     func(parent string) *examplefreightv1.Shipment
	Update     func(parent string) *examplefreightv1.Shipment
	Skip       []string
	currParent int
}

func (a *aipTestShipmentFixture) Test(t *testing.T) {
	t.Run("Create", a.testCreate)
	t.Run("Get", a.testGet)
	t.Run("Update", a.testUpdate)
	t.Run("List", a.testList)
}

func (a *aipTestShipmentFixture) ctx() context.Context {
	if a.Ctx == nil {
		return context.Background()
	}
	return a.Ctx
}

func (a *aipTestShipmentFixture) maybeSkip(t *testing.T) {
	for _, skip := range a.Skip {
		if strings.Contains(t.Name(), skip) {
			t.Skip("skipped because of .Skip")
		}
	}
}

func (a *aipTestShipmentFixture) nextParent(t *testing.T, pristine bool) string {
	if pristine {
		a.currParent++
	}
	if a.currParent >= len(a.Parents) {
		t.Fatal("need atleast", a.currParent+1, "parents")
	}
	return a.Parents[a.currParent]
}

func (a *aipTestShipmentFixture) peekNextParent(t *testing.T) string {
	next := a.currParent + 1
	if next >= len(a.Parents) {
		t.Fatal("need atleast", next+1, "parents")
	}
	return a.Parents[next]
}

func (a *aipTestShipmentFixture) testCreate(t *testing.T) {
	// Standard methods: Create
	// https://google.aip.dev/133

	_ = protoreflect.ValueOf

	parent := a.nextParent(t, false)

	t.Run("persisted", func(t *testing.T) {
		a.maybeSkip(t)
		msg, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
			Parent:   parent,
			Shipment: a.Create(parent),
		})
		assert.NilError(t, err)
		persisted, err := a.Service.GetShipment(a.ctx(), &examplefreightv1.GetShipmentRequest{
			Name: msg.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, msg, persisted, protocmp.Transform())
	})

	t.Run("create time", func(t *testing.T) {
		a.maybeSkip(t)
		msg, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
			Parent:   parent,
			Shipment: a.Create(parent),
		})
		assert.NilError(t, err)
		assert.Check(t, time.Since(msg.CreateTime.AsTime()) < time.Second)
	})

	t.Run("required fields", func(t *testing.T) {
		a.maybeSkip(t)
		for _, tt := range []protoreflect.Name{
			"origin_site",
			"destination_site",
			"pickup_earliest_time",
			"pickup_latest_time",
			"delivery_earliest_time",
			"delivery_latest_time",
		} {
			tt := tt
			t.Run(string(tt), func(t *testing.T) {
				msg := a.Create(parent)
				msg.ProtoReflect().Clear(msg.ProtoReflect().Descriptor().Fields().ByName(tt))
				_, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
					Parent:   parent,
					Shipment: msg,
				})
				assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
			})
		}
	})

	t.Run("missing parent", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
			Parent:   "",
			Shipment: a.Create(parent),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid parent", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
			Parent:   "invalid parent",
			Shipment: a.Create(parent),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

}

func (a *aipTestShipmentFixture) testGet(t *testing.T) {
	// Standard methods: Get
	// https://google.aip.dev/131

	parent := a.nextParent(t, false)
	created00, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
		Parent:   parent,
		Shipment: a.Create(parent),
	})
	assert.NilError(t, err)

	t.Run("missing", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.GetShipment(a.ctx(), &examplefreightv1.GetShipmentRequest{
			Name: created00.Name + "notfound",
		})
		assert.Equal(t, codes.NotFound, status.Code(err), err)
	})

	t.Run("exists", func(t *testing.T) {
		a.maybeSkip(t)
		msg, err := a.Service.GetShipment(a.ctx(), &examplefreightv1.GetShipmentRequest{
			Name: created00.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, created00, msg, protocmp.Transform())
	})

	t.Run("missing name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.GetShipment(a.ctx(), &examplefreightv1.GetShipmentRequest{
			Name: "",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.GetShipment(a.ctx(), &examplefreightv1.GetShipmentRequest{
			Name: "invalid name",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

}

func (a *aipTestShipmentFixture) testUpdate(t *testing.T) {
	// Standard methods: Update
	// https://google.aip.dev/134

	_ = protoreflect.ValueOf

	parent := a.nextParent(t, false)

	t.Run("persisted", func(t *testing.T) {
		a.maybeSkip(t)
		created, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
			Parent:   parent,
			Shipment: a.Create(parent),
		})
		assert.NilError(t, err)
		updated, err := a.Service.UpdateShipment(a.ctx(), &examplefreightv1.UpdateShipmentRequest{
			Shipment: (func() *examplefreightv1.Shipment {
				msg := a.Update(parent)
				msg.Name = created.Name
				return msg
			})(),
		})
		assert.NilError(t, err)
		persisted, err := a.Service.GetShipment(a.ctx(), &examplefreightv1.GetShipmentRequest{
			Name: updated.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, updated, persisted, protocmp.Transform())
	})

	t.Run("update time", func(t *testing.T) {
		a.maybeSkip(t)
		created, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
			Parent:   parent,
			Shipment: a.Create(parent),
		})
		assert.NilError(t, err)
		updated, err := a.Service.UpdateShipment(a.ctx(), &examplefreightv1.UpdateShipmentRequest{
			Shipment: (func() *examplefreightv1.Shipment {
				msg := a.Update(parent)
				msg.Name = created.Name
				return msg
			})(),
		})
		assert.NilError(t, err)
		assert.Check(t, updated.UpdateTime.AsTime().After(created.UpdateTime.AsTime()))
	})

	t.Run("required fields", func(t *testing.T) {
		a.maybeSkip(t)
		for _, tt := range []protoreflect.Name{
			"origin_site",
			"destination_site",
			"pickup_earliest_time",
			"pickup_latest_time",
			"delivery_earliest_time",
			"delivery_latest_time",
		} {
			tt := tt
			t.Run(string(tt), func(t *testing.T) {
				created, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
					Parent:   parent,
					Shipment: a.Create(parent),
				})
				assert.NilError(t, err)
				msg := a.Update(parent)
				msg.Name = created.Name
				msg.ProtoReflect().Clear(msg.ProtoReflect().Descriptor().Fields().ByName(tt))
				_, err = a.Service.UpdateShipment(a.ctx(), &examplefreightv1.UpdateShipmentRequest{
					Shipment: msg,
					UpdateMask: &fieldmaskpb.FieldMask{
						Paths: []string{
							"*",
						},
					},
				})
				assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
			})
		}
	})

	t.Run("invalid update mask", func(t *testing.T) {
		a.maybeSkip(t)
		created, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
			Parent:   parent,
			Shipment: a.Create(parent),
		})
		assert.NilError(t, err)
		_, err = a.Service.UpdateShipment(a.ctx(), &examplefreightv1.UpdateShipmentRequest{
			Shipment: (func() *examplefreightv1.Shipment {
				msg := a.Update(parent)
				msg.Name = created.Name
				return msg
			})(),
			UpdateMask: &fieldmaskpb.FieldMask{
				Paths: []string{
					"invalid_field_xxx",
				},
			},
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("missing name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.UpdateShipment(a.ctx(), &examplefreightv1.UpdateShipmentRequest{
			Shipment: (func() *examplefreightv1.Shipment {
				msg := a.Update(parent)
				msg.Name = ""
				return msg
			})(),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid name", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.UpdateShipment(a.ctx(), &examplefreightv1.UpdateShipmentRequest{
			Shipment: (func() *examplefreightv1.Shipment {
				msg := a.Update(parent)
				msg.Name = ""
				return msg
			})(),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

}

func (a *aipTestShipmentFixture) testList(t *testing.T) {
	// Standard methods: List
	// https://google.aip.dev/132

	parent01 := a.nextParent(t, false)
	parent02 := a.nextParent(t, true)

	const n = 15

	parent01msgs := make([]*examplefreightv1.Shipment, n)
	for i := 0; i < n; i++ {
		msg, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
			Parent:   parent01,
			Shipment: a.Create(parent01),
		})
		assert.NilError(t, err)
		parent01msgs[i] = msg
	}

	parent02msgs := make([]*examplefreightv1.Shipment, n)
	for i := 0; i < n; i++ {
		msg, err := a.Service.CreateShipment(a.ctx(), &examplefreightv1.CreateShipmentRequest{
			Parent:   parent02,
			Shipment: a.Create(parent02),
		})
		assert.NilError(t, err)
		parent02msgs[i] = msg
	}

	// list methods with a specified parent should not return resources
	// owned by another parent.
	t.Run("isolation", func(t *testing.T) {
		a.maybeSkip(t)
		response, err := a.Service.ListShipments(a.ctx(), &examplefreightv1.ListShipmentsRequest{
			Parent:   parent02,
			PageSize: 9999,
		})
		assert.NilError(t, err)
		assert.DeepEqual(
			t,
			parent02msgs,
			response.Shipments,
			protocmp.Transform(),
			cmpopts.SortSlices(func(a, b *examplefreightv1.Shipment) bool {
				return a.Name < b.Name
			}),
		)
	})

	t.Run("pagination", func(t *testing.T) {
		a.maybeSkip(t)
		// If there are no more resources, next_page_token should be unset.
		t.Run("next page token", func(t *testing.T) {
			a.maybeSkip(t)
			response, err := a.Service.ListShipments(a.ctx(), &examplefreightv1.ListShipmentsRequest{
				Parent:   parent02,
				PageSize: n,
			})
			assert.NilError(t, err)
			assert.Equal(t, "", response.NextPageToken)
		})

		// Listing resource one by one should eventually return all resources created.
		// Catches errors where page tokens are not stable.
		t.Run("one by one", func(t *testing.T) {
			a.maybeSkip(t)
			msgs := make([]*examplefreightv1.Shipment, 0, n)
			var nextPageToken string
			for {
				response, err := a.Service.ListShipments(a.ctx(), &examplefreightv1.ListShipmentsRequest{
					Parent:    parent02,
					PageSize:  1,
					PageToken: nextPageToken,
				})
				assert.NilError(t, err)
				assert.Equal(t, 1, len(response.Shipments))
				msgs = append(msgs, response.Shipments...)
				nextPageToken = response.NextPageToken
				if nextPageToken == "" {
					break
				}
			}
			assert.DeepEqual(
				t,
				parent02msgs,
				msgs,
				protocmp.Transform(),
				cmpopts.SortSlices(func(a, b *examplefreightv1.Shipment) bool {
					return a.Name < b.Name
				}),
			)
		})

	})

	t.Run("deleted", func(t *testing.T) {
		a.maybeSkip(t)
		// Delete some of the resources
		const nDelete = 5
		for i := 0; i < nDelete; i++ {
			_, err := a.Service.DeleteShipment(a.ctx(), &examplefreightv1.DeleteShipmentRequest{
				Name: parent02msgs[i].Name,
			})
			assert.NilError(t, err)
		}
		response, err := a.Service.ListShipments(a.ctx(), &examplefreightv1.ListShipmentsRequest{
			Parent:   parent02,
			PageSize: 9999,
		})
		assert.NilError(t, err)
		assert.DeepEqual(
			t,
			parent02msgs[nDelete:],
			response.Shipments,
			protocmp.Transform(),
			cmpopts.SortSlices(func(a, b *examplefreightv1.Shipment) bool {
				return a.Name < b.Name
			}),
		)
	})
	t.Run("invalid parent", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.ListShipments(a.ctx(), &examplefreightv1.ListShipmentsRequest{
			Parent: "invalid parent",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("negative page size", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.ListShipments(a.ctx(), &examplefreightv1.ListShipmentsRequest{
			Parent:   parent02,
			PageSize: -10,
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	t.Run("invalid page token", func(t *testing.T) {
		a.maybeSkip(t)
		_, err := a.Service.ListShipments(a.ctx(), &examplefreightv1.ListShipmentsRequest{
			Parent:    parent02,
			PageToken: "invalid page token",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})
}
